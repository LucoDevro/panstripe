% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_pangenome_covariates.R
\name{compare_pangenome_covariates}
\alias{compare_pangenome_covariates}
\title{compare_pangenome_covariates}
\usage{
compare_pangenome_covariates(
  fits,
  covariates,
  family = "Tweedie",
  keep = "all",
  modeldisp = FALSE,
  ci_type = "norm",
  conf = 0.95,
  nboot = 100
)
}
\arguments{
\item{fits}{a list of `panfit` objects generated by the `panstripe` function}

\item{covariates}{a `data.frame` object generated where the first column matches the names in the list of pangenomes. Covariates to be tested are given in subsequent columns.}

\item{family}{the family used by glm. One of 'Tweedie', 'Poisson', 'Gamma' or 'Gaussian'. (default='Tweedie')}

\item{keep}{a vector of a subset of the column names in the covariate data.frame. (default='all')}

\item{modeldisp}{whether or not to model the dispersion as a function of the covariates of interest if using a Tweedie family (default=FALSE)}

\item{ci_type}{the method used to calculate the bootstrap CI (default='bca'). See \link[boot]{boot.ci} for more details.}

\item{conf}{A scalar indicating the confidence level of the required intervals (default=0.95)}

\item{nboot}{the number of bootstrap replicates to perform (default=100)}
}
\value{
a list containing a summary of the comparison and the resulting `glm` model object
}
\description{
Tests whether covariates associated with different pangenomes are significantly associated with gene gain and loss or errors.
}
\examples{

simA <- simulate_pan(rate=1e-4, ngenomes = 50, fn_error_rate=1, fp_error_rate=1)
simB <- simulate_pan(rate=1e-3, ngenomes = 200, fn_error_rate=1, fp_error_rate=1)
simC <- simulate_pan(rate=5e-3, ngenomes = 100, fn_error_rate=1, fp_error_rate=1)
tfits <- purrr::map(list(A=simA, B=simB, C=simC), ~{
  panstripe(.x$pa, .x$tree, nboot=10, ci_type='perc')
})

covariates <- tibble::tibble(
  pangenome=c('A','B','C','E','F','G'),
  dummy=c(1,2,3,1,2,2)
)
fits <- c(tfits, list(E=tfits[[1]], F=tfits[[2]], G=tfits[[3]]))
comp <- compare_pangenome_covariates(fits, covariates, modeldisp=TRUE)
comp$summary

}
